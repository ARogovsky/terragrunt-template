---
# tasks file for local setup
  - name: S3 bucket
    template:
      src: local/setup/setup-s3.tf.j2
      dest: "{{ setup_dir }}/s3.tf"
  - name: IAM user
    template:
      src: local/setup/setup-iam.tf.j2
      dest: "{{ setup_dir }}/iam.tf"
  - name: IAM roles
    template:
      src: local/setup/setup-roles.tf.j2
      dest: "{{ setup_dir }}/roles.tf"
  - name: AWS Provider
    template:
      src: local/setup/setup-provider.tf.j2
      dest: "{{ setup_dir }}/provider.tf"
  - name: KMS key
    template:
      src: local/setup/setup-kms.tf.j2
      dest: "{{ setup_dir }}/kms.tf"
  - name: TF Output
    copy:
      src: local/setup/setup-output.tf
      dest: "{{ setup_dir }}/output.tf"
  - name: Local backend
    copy:
      src: local/setup/local.tf
      dest: "{{ setup_dir }}/local.tf"
  - name: Execute init
    shell: terraform init
    args:
      chdir:  "{{ setup_dir }}"
  - name: Execute plan
    shell: terraform plan -out ../setup.plan
    args:
      chdir:  "{{ setup_dir }}"
      creates: terraform.tfstate.backup
  - name: Execute apply
    shell: terraform apply ../setup.plan
    args:
      chdir:  "{{ setup_dir }}"
      creates: terraform.tfstate.backup
  - name: Register bucket
    shell: terraform output bucket
    args:
      chdir:  "{{ setup_dir }}"
    register: bucket
  - name: Register key
    shell: terraform output key
    args:
      chdir:  "{{ setup_dir }}"
    register: key
  - name: Register terraform_role ARN
    shell: terraform output terraform_role
    args:
      chdir:  "{{ setup_dir }}"
    register: role
  - name: Set setup_bucket
    set_fact:
      setup_bucket: "{{ bucket.stdout }}"
  - name: Set setup_key
    set_fact:
      setup_key: "{{ key.stdout }}"
  - name: Set setup_role
    set_fact:
      setup_role: "{{ role.stdout }}"
  - name: Setup terragrunt hcl to setup directory
    template:
      src: state/terragrunt/terragrunt.hcl.j2
      dest: "{{ project_output }}/{{ uniq_id }}/terragrunt.hcl"
  - name: Turn off local backend
    shell: mv local.tf local-backend.tf.off
    args:
      chdir:  "{{ setup_dir }}"
      creates: local-backend.tf.off
  - name: Enable terragtunt layout for setup
    copy:
      src: "aws/global/{{item}}"
      dest: "{{ setup_dir }}"
    loop:
      - provider.tf
      - terraform.tf
      - terragrunt.hcl
      - variables.tf
  - name: Perform terragrunt migration
    shell: terragrunt init -force-copy
    args:
      chdir:  "{{ setup_dir }}"
  - name: Move out empty terraform.tfstate
    shell: mv terraform.tfstate terraform.tfstate.local
    args:
      chdir:  "{{ setup_dir }}"
      creates: terraform.tfstate.local
